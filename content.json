{"meta":{"title":"Arqady Newton","subtitle":"describe next....","description":"please","author":"Arqady Newton","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Java逐行读取文本文件的几种方式以及效率对比","slug":"Java逐行读取文本文件的几种方式以及效率对比","date":"2020-08-18T16:00:00.000Z","updated":"2020-08-19T19:57:50.663Z","comments":true,"path":"2020/08/19/Java逐行读取文本文件的几种方式以及效率对比/","link":"","permalink":"http://yoursite.com/2020/08/19/Java%E9%80%90%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/","excerpt":"If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Thanks,have a good day","text":"If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Thanks,have a good day 大致结果1000000 行文本读取结果比对 12345678BufferedReader 耗时: 49msScanner 耗时: 653msApache Commons IO 耗时: 44msInputStreamReader 耗时: 191msFileInputStream 耗时: 3171msBufferedInputStream 耗时: 70msFileUtils 耗时: 46msFiles 耗时: 99ms 24488656 行文本读取结果比对: 12345678BufferedReader 耗时: 989msScanner 耗时: 11899msApache Commons IO 耗时: 568msInputStreamReader 耗时: 3377msFileInputStream 耗时: 78903msBufferedInputStream 耗时: 1480msFileUtils 耗时: 16569msFiles 耗时: 25162ms 可见，当文件较小时:ApacheCommonsIO 流 表现最佳；FileUtils, BufferedReader 居其二；BufferedInputStream, Files 随其后；InputStreamReader, Scanner, FileInputStream 略慢 当文件较大时:Apache Commons IO 流 , BufferedReader 依然出色，Files, FileUtils 速度开始变慢. 分析使用到的工具类包括: java.io.BufferedReader java.util.Scanner org.apache.commons.io.FileUtils java.io.InputStreamReader java.io.FileInputStream java.io.BufferedInputStream com.google.common.io.Files Apache Commons IO 和 BufferedReader 使用到了缓冲区，所以在不消耗大量内存的情况下提高了处理速度； FileUtils 和 Files 是先把文件内容全部读入内存，然后在进行操作，是典型的空间换时间案例。这种方法可能会大量消耗内存 , 酌情使用； 建议在逐行读取文本内容的需求下，建议使用 Apache Commons IO 流，或者 BufferedReader, 既不会过多地占用内存，也保证了优异的处理速度. 源代码import com.google.common.io.Files;import org.apache.commons.io.Charsets;import org.apache.commons.io.FileUtils;import org.apache.commons.io.LineIterator;import java.io.*;import java.util.List;import java.util.Random;import java.util.Scanner;/** * @Description: 逐行读取文件性能对比 * @Author: Seven-Steven * @Date: 19-1-25 **/public class ReadByLineFromFileTest &#123; public static void main(String[] args) &#123; ReadByLineFromFileTest test = new ReadByLineFromFileTest(); String filePath = &quot;./testFile.txt&quot;; File file = new File(filePath); if (!file.exists()) &#123; // 随机写入 1000000 行内容 test.writeRandom(filePath, 1000000); &#125; long before, after, time; // 使用 BufferedReader 逐行读取文件 before = System.currentTimeMillis(); test.bufferedReader(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;BufferedReader 耗时: &quot; + time + &quot;ms&quot;); // 使用 Scanner 逐行读取文件 before = System.currentTimeMillis(); test.scanner(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;Scanner 耗时: &quot; + time + &quot;ms&quot;); // 使用 Apache Commons IO 流逐行读取文件 before = System.currentTimeMillis(); test.apacheCommonsIo(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;Apache Commons IO 耗时: &quot; + time + &quot;ms&quot;); // 使用 InputStreamReader 逐字符读取文件 before = System.currentTimeMillis(); test.inputStreamReader(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;InputStreamReader 耗时: &quot; + time + &quot;ms&quot;); // 使用 FileInputStream 逐字符读取文件 before = System.currentTimeMillis(); test.fileInputStream(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;FileInputStream 耗时: &quot; + time + &quot;ms&quot;); // 使用 BufferedInputStream 逐字符读取文件 before = System.currentTimeMillis(); test.bufferedInputStream(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;BufferedInputStream 耗时: &quot; + time + &quot;ms&quot;); // 使用 FileUtils 一次性读取文件所有行 before = System.currentTimeMillis(); test.fileUtils(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;FileUtils 耗时: &quot; + time + &quot;ms&quot;); // 使用 Files 一次性读取文件所有行 before = System.currentTimeMillis(); test.files(filePath); after = System.currentTimeMillis(); time = after - before; System.out.println(&quot;Files 耗时: &quot; + time + &quot;ms&quot;); &#125; /** * @Description: 使用 Apache Commons IO 流逐行读取文件 * Maven 依赖: * &lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt; * &lt;dependency&gt; * &lt;groupId&gt;commons-io&lt;/groupId&gt; * &lt;artifactId&gt;commons-io&lt;/artifactId&gt; * &lt;version&gt;2.6&lt;/version&gt; * &lt;/dependency&gt; * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-24 **/ public void apacheCommonsIo(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; try &#123; LineIterator iterator = FileUtils.lineIterator(file, &quot;UTf-8&quot;); while (iterator.hasNext()) &#123; String line = iterator.nextLine(); // TODO // System.out.println(line); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /** * @Description: 使用 Scanner 类逐行读取 * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-24 **/ public void scanner(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; FileInputStream fileInputStream = null; Scanner scanner = null; try &#123; fileInputStream = new FileInputStream(file); scanner = new Scanner(fileInputStream, &quot;UTF-8&quot;); while (scanner.hasNextLine()) &#123; // TODO things String line = scanner.nextLine(); // System.out.println(line); &#125; &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; finally &#123; if (fileInputStream != null) &#123; try &#123; fileInputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (scanner != null) &#123; scanner.close(); &#125; &#125; &#125; /** * @Description: 使用 Files 一次性读取所有行 * Maven 依赖: * &lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt; * &lt;dependency&gt; * &lt;groupId&gt;com.google.guava&lt;/groupId&gt; * &lt;artifactId&gt;guava&lt;/artifactId&gt; * &lt;version&gt;r05&lt;/version&gt; * &lt;/dependency&gt; * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-24 **/ public void files(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; try &#123; List&lt;String&gt; fileLines = Files.readLines(file, Charsets.toCharset(&quot;UTF-8&quot;)); for (String str : fileLines) &#123; // TODO things // System.out.println(str); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; /** * @Description: 使用 FileUtils 一次性将文件所有行读入内存 * Maven 依赖: * &lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt; * &lt;dependency&gt; * &lt;groupId&gt;commons-io&lt;/groupId&gt; * &lt;artifactId&gt;commons-io&lt;/artifactId&gt; * &lt;version&gt;2.6&lt;/version&gt; * &lt;/dependency&gt; * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-24 **/ public void fileUtils(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; try &#123; List&lt;String&gt; fileLines = FileUtils.readLines(file, Charsets.UTF_8); for (String str : fileLines) &#123; // TODO // System.out.println(str); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public void bufferedInputStream(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; FileInputStream fileInputStream = null; BufferedInputStream bufferedInputStream = null; try &#123; fileInputStream = new FileInputStream(file); bufferedInputStream = new BufferedInputStream(fileInputStream); int temp; char character; String line = &quot;&quot;; while ((temp = bufferedInputStream.read()) != -1) &#123; character = (char) temp; if (character != &#x27;\\n&#x27;) &#123; line += character; &#125; else &#123; // TODO // System.out.println(line); line = &quot;&quot;; &#125; &#125; &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (fileInputStream != null) &#123; try &#123; fileInputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (bufferedInputStream != null) &#123; try &#123; bufferedInputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * @Description: 使用 FileInputStream 逐字符读取文件 * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-23 **/ public void fileInputStream(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; FileInputStream fileInputStream = null; try &#123; fileInputStream = new FileInputStream(file); int temp; char character; String line = &quot;&quot;; while ((temp = fileInputStream.read()) != -1) &#123; character = (char) temp; if (character != &#x27;\\n&#x27;) &#123; line += character; &#125; else &#123; // TODO // System.out.println(line); line = &quot;&quot;; &#125; &#125; &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (fileInputStream != null) &#123; try &#123; fileInputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * @Description: 使用 InputStreamReader 逐行读取文件 * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-23 **/ public void inputStreamReader(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; FileInputStream fileInputStream = null; InputStreamReader inputStreamReader = null; try &#123; fileInputStream = new FileInputStream(file); inputStreamReader = new InputStreamReader(fileInputStream); int temp; char character; String line = &quot;&quot;; while ((temp = inputStreamReader.read()) != -1) &#123; character = (char) temp; if (character != &#x27;\\n&#x27;) &#123; line += character; &#125; else &#123; // TODO // System.out.println(line); line = &quot;&quot;; &#125; &#125; &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (fileInputStream != null) &#123; try &#123; fileInputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (inputStreamReader != null) &#123; try &#123; inputStreamReader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * @Description: 使用 BufferedReader 逐行读取文件内容 * @Param: [filePath] 文件路径 * @Author: Seven-Steven * @Date: 19-1-23 **/ public void bufferedReader(String filePath) &#123; File file = new File(filePath); if (!file.exists()) &#123; return; &#125; FileReader fileReader = null; BufferedReader bufferedReader = null; try &#123; fileReader = new FileReader(file); bufferedReader = new BufferedReader(fileReader); String line = &quot;&quot;; while ((line = bufferedReader.readLine()) != null) &#123; // TODO things // System.out.println(line); &#125; &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (fileReader != null) &#123; try &#123; fileReader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; if (bufferedReader != null) &#123; try &#123; bufferedReader.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; /** * @Description: 随机往文件中写入 totalLines 行内容 * @Param: [filePath, totalLines] 文件路径, 内容行数 * @Author: Seven-Steven * @Date: 19-1-23 **/ public void writeRandom(String filePath, int totalLines) &#123; RandomAccessFile file = null; Random random = new Random(); try &#123; file = new RandomAccessFile(filePath, &quot;rw&quot;); long length = file.length(); for (int i = 0; i &lt; totalLines; i++) &#123; file.seek(length); int number = random.nextInt(1000000); String line = number + &quot;\\n&quot;; file.writeBytes(line); length += line.length(); &#125; &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; if (file != null) &#123; try &#123; file.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; More info: Deployment","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[]},{"title":"acticle title","slug":"acticle-title","date":"2020-08-17T19:41:55.000Z","updated":"2020-08-20T08:25:09.552Z","comments":true,"path":"2020/08/18/acticle-title/","link":"","permalink":"http://yoursite.com/2020/08/18/acticle-title/","excerpt":"","text":"","categories":[],"tags":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/tags/hello/"},{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-08-16T19:15:40.585Z","updated":"2020-08-16T19:15:40.585Z","comments":true,"path":"2020/08/17/hello-world/","link":"","permalink":"http://yoursite.com/2020/08/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"hello","slug":"hello","permalink":"http://yoursite.com/tags/hello/"},{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]}